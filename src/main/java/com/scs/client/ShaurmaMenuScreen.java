package com.scs.client;

import net.minecraft.client.gui.screens.Screen;
import net.minecraft.client.gui.components.Button;
import net.minecraft.client.gui.components.ObjectSelectionList;
import net.minecraft.client.gui.GuiGraphics;
import net.minecraft.network.chat.Component;
import net.minecraft.network.chat.CommonComponents;
import net.minecraft.client.Minecraft;
import net.minecraft.util.Mth;
import org.lwjgl.glfw.GLFW;
import com.scs.Config;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;

public class ShaurmaMenuScreen extends Screen {
    private static final DecimalFormat DECIMAL_FORMAT = new DecimalFormat("#,###");
    private static final DecimalFormat AVERAGE_FORMAT = new DecimalFormat("#.##");

    private int animationTick = 0;
    private Button tapButton;
    private Button resetButton;
    private final List<FloatingNumber> floatingNumbers = new ArrayList<>();

    // –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    private static final Achievement[] ACHIEVEMENTS = {
            new Achievement("first_tap", "–ü–µ—Ä–≤—ã–π —Ç–∞–ø", "–°–¥–µ–ª–∞–π —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Ç–∞–ø!", "üåØ", 1),
            new Achievement("hundred_taps", "–°—Ç–æ–ª–µ—Ç–∏–µ", "100 —Ç–∞–ø–æ–≤", "üíØ", 100),
            new Achievement("thousand_taps", "–¢—ã—Å—è—á–Ω–∏–∫", "1000 —Ç–∞–ø–æ–≤", "üî•", 1000),
            new Achievement("hundred_shaurma", "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä", "100 —à–∞—É—Ä–º—ã", "üì¶", 100),
            new Achievement("thousand_shaurma", "–ú–∏–ª–ª–∏–æ–Ω–µ—Ä", "1000 —à–∞—É—Ä–º—ã", "üí∞", 1000),
            new Achievement("ten_thousand_shaurma", "–û–ª–∏–≥–∞—Ä—Ö", "10000 —à–∞—É—Ä–º—ã", "üëë", 10000)
    };

    public ShaurmaMenuScreen() {
        super(Component.literal("üåØ –®–∞—É—Ä–º–∞ –ú–µ–Ω—é üåØ"));
    }

    @Override
    protected void init() {
        super.init();

        int centerX = this.width / 2;
        int centerY = this.height / 2;

        // –ë–æ–ª—å—à–∞—è –∫–Ω–æ–ø–∫–∞ —Ç–∞–ø–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ
        this.tapButton = this.addRenderableWidget(Button.builder(
                        Component.literal("üåØ –¢–ê–ü! üåØ"),
                        button -> {
                            if (Config.enableShaurma) {
                                ShaurmaSystem.onShaurmaTap();
                                createFloatingNumber();
                                playTapAnimation();
                            }
                        })
                .bounds(centerX - 60, centerY - 15, 120, 30)
                .build());

        // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        this.resetButton = this.addRenderableWidget(Button.builder(
                        Component.literal("üîÑ –°–±—Ä–æ—Å"),
                        button -> {
                            ShaurmaSystem.resetData();
                            this.onClose();
                        })
                .bounds(this.width - 110, this.height - 30, 100, 20)
                .build());

        // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        this.addRenderableWidget(Button.builder(CommonComponents.GUI_DONE,
                        button -> this.onClose())
                .bounds(10, this.height - 30, 100, 20)
                .build());
    }

    @Override
    public void tick() {
        super.tick();
        animationTick++;

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–µ—Ç–∞—é—â–∏–µ —á–∏—Å–ª–∞
        floatingNumbers.removeIf(num -> {
            num.tick();
            return num.isDead();
        });
    }

    private void createFloatingNumber() {
        int x = this.width / 2 + (int)(Math.random() * 40 - 20);
        int y = this.height / 2 + (int)(Math.random() * 20 - 10);
        floatingNumbers.add(new FloatingNumber(x, y, "+1"));
    }

    private void playTapAnimation() {
        // –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        if (tapButton != null) {
            // –ö–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –Ω–∞–∂–∞—Ç–æ–π –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–∫–æ–≤
        }
    }

    @Override
    public void render(GuiGraphics guiGraphics, int mouseX, int mouseY, float partialTick) {
        // –ö—Ä–∞—Å–∏–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        this.renderBackground(guiGraphics, mouseX, mouseY, partialTick);
        renderGradientBackground(guiGraphics);

        super.render(guiGraphics, mouseX, mouseY, partialTick);

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        renderAnimatedTitle(guiGraphics);

        // –ì–ª–∞–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        renderMainStats(guiGraphics);

        // –ë–æ–∫–æ–≤—ã–µ –ø–∞–Ω–µ–ª–∏
        renderLeftPanel(guiGraphics);  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        renderRightPanel(guiGraphics); // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è

        // –õ–µ—Ç–∞—é—â–∏–µ —á–∏—Å–ª–∞
        renderFloatingNumbers(guiGraphics);

        // –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
        renderBottomPanel(guiGraphics);
    }

    private void renderGradientBackground(GuiGraphics guiGraphics) {
        // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        int color1 = 0xFF1a1a2e;  // –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π
        int color2 = 0xFF16213e;  // –ï—â–µ —Ç–µ–º–Ω–µ–µ
        int color3 = 0xFF0f3460;  // –°–∏–Ω–∏–π

        // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
        guiGraphics.fillGradient(0, 0, this.width, this.height / 3, color1, color2);
        guiGraphics.fillGradient(0, this.height / 3, this.width, 2 * this.height / 3, color2, color3);
        guiGraphics.fillGradient(0, 2 * this.height / 3, this.width, this.height, color3, color1);

        // –î–æ–±–∞–≤–ª—è–µ–º –±–ª–∏–∫–∏
        float wave = Mth.sin(animationTick * 0.1f) * 0.1f + 0.9f;
        int blinkColor = (int)(255 * wave) << 24 | 0x00FFFF;
        guiGraphics.fill(0, 0, this.width, 2, blinkColor);
        guiGraphics.fill(0, this.height - 2, this.width, this.height, blinkColor);
    }

    private void renderAnimatedTitle(GuiGraphics guiGraphics) {
        String title = "üåØ –®–ê–£–†–ú–ê –ò–ú–ü–ï–†–ò–Ø üåØ";

        // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
        float scale = 1.5f + Mth.sin(animationTick * 0.1f) * 0.1f;

        guiGraphics.pose().pushPose();
        guiGraphics.pose().scale(scale, scale, 1.0f);

        int titleWidth = (int)(this.font.width(title) * scale);
        int x = (int)((this.width - titleWidth) / 2 / scale);
        int y = (int)(20 / scale);

        // –¢–µ–Ω—å
        guiGraphics.drawString(this.font, title, x + 2, y + 2, 0xFF000000, false);
        // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        guiGraphics.drawString(this.font, title, x, y, 0xFFFFD700, false);

        guiGraphics.pose().popPose();
    }

    private void renderMainStats(GuiGraphics guiGraphics) {
        int centerX = this.width / 2;
        int startY = 70;

        // –ü–∞–Ω–µ–ª—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        int panelWidth = 300;
        int panelHeight = 80;
        int panelX = centerX - panelWidth / 2;

        // –§–æ–Ω –ø–∞–Ω–µ–ª–∏
        guiGraphics.fill(panelX - 5, startY - 5, panelX + panelWidth + 5, startY + panelHeight + 5, 0xFF2a2a3e);
        guiGraphics.fill(panelX, startY, panelX + panelWidth, startY + panelHeight, 0xFF3a3a5e);

        // –†–∞–º–∫–∞
        guiGraphics.fill(panelX - 1, startY - 1, panelX + panelWidth + 1, startY, 0xFFFFD700);
        guiGraphics.fill(panelX - 1, startY + panelHeight, panelX + panelWidth + 1, startY + panelHeight + 1, 0xFFFFD700);
        guiGraphics.fill(panelX - 1, startY - 1, panelX, startY + panelHeight + 1, 0xFFFFD700);
        guiGraphics.fill(panelX + panelWidth, startY - 1, panelX + panelWidth + 1, startY + panelHeight + 1, 0xFFFFD700);

        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞—É—Ä–º—ã - –±–æ–ª—å—à–∏–º–∏ –±—É–∫–≤–∞–º–∏
        String shaurmaText = DECIMAL_FORMAT.format(ShaurmaSystem.getShaurmaCount()) + " üåØ";
        guiGraphics.pose().pushPose();
        guiGraphics.pose().scale(2.0f, 2.0f, 1.0f);
        int bigTextX = (int)((centerX - this.font.width(shaurmaText)) / 2);
        guiGraphics.drawString(this.font, shaurmaText, bigTextX, (startY + 10) / 2, 0xFF00FF00, true);
        guiGraphics.pose().popPose();

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        String tapsText = "–í—Å–µ–≥–æ —Ç–∞–ø–æ–≤: " + DECIMAL_FORMAT.format(ShaurmaSystem.getTotalTaps());
        String avgText = "–°—Ä–µ–¥–Ω–µ–µ –∑–∞ —Ç–∞–ø: " + AVERAGE_FORMAT.format(ShaurmaSystem.getAveragePerTap());

        guiGraphics.drawString(this.font, tapsText, centerX - this.font.width(tapsText) / 2, startY + 50, 0xFFCCCCCC, false);
        guiGraphics.drawString(this.font, avgText, centerX - this.font.width(avgText) / 2, startY + 62, 0xFFCCCCCC, false);
    }

    private void renderLeftPanel(GuiGraphics guiGraphics) {
        int panelX = 20;
        int panelY = 100;
        int panelWidth = 150;
        int panelHeight = 200;

        // –§–æ–Ω –ø–∞–Ω–µ–ª–∏
        guiGraphics.fill(panelX - 3, panelY - 3, panelX + panelWidth + 3, panelY + panelHeight + 3, 0xFF2a2a3e);
        guiGraphics.fill(panelX, panelY, panelX + panelWidth, panelY + panelHeight, 0xFF1a1a2e);

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        String title = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞";
        guiGraphics.drawString(this.font, title, panelX + 5, panelY + 5, 0xFFFFD700, true);

        int y = panelY + 20;

        // –†–∞–∑–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        String[] stats = {
                "–í—Å–µ–≥–æ —à–∞—É—Ä–º—ã:",
                DECIMAL_FORMAT.format(ShaurmaSystem.getShaurmaCount()),
                "",
                "–í—Å–µ–≥–æ —Ç–∞–ø–æ–≤:",
                DECIMAL_FORMAT.format(ShaurmaSystem.getTotalTaps()),
                "",
                "–õ—É—á—à–∏–π —Ç–∞–ø:",
                "10 —à–∞—É—Ä–º—ã",
                "",
                "–í—Ä–µ–º—è –∏–≥—Ä—ã:",
                "‚àû —á–∞—Å–æ–≤"
        };

        for (String stat : stats) {
            if (stat.isEmpty()) {
                y += 5;
                continue;
            }

            boolean isValue = stat.matches(".*\\d.*");
            int color = isValue ? 0xFF00FF00 : 0xFFCCCCCC;

            guiGraphics.drawString(this.font, stat, panelX + 5, y, color, false);
            y += 12;
        }
    }

    private void renderRightPanel(GuiGraphics guiGraphics) {
        int panelX = this.width - 170;
        int panelY = 100;
        int panelWidth = 150;
        int panelHeight = 200;

        // –§–æ–Ω –ø–∞–Ω–µ–ª–∏
        guiGraphics.fill(panelX - 3, panelY - 3, panelX + panelWidth + 3, panelY + panelHeight + 3, 0xFF2a2a3e);
        guiGraphics.fill(panelX, panelY, panelX + panelWidth, panelY + panelHeight, 0xFF1a1a2e);

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        String title = "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è";
        guiGraphics.drawString(this.font, title, panelX + 5, panelY + 5, 0xFFFFD700, true);

        int y = panelY + 20;

        for (Achievement achievement : ACHIEVEMENTS) {
            boolean unlocked = ShaurmaSystem.hasAchievement(achievement.id);

            String text = achievement.icon + " " + achievement.name;
            int color = unlocked ? 0xFF00FF00 : 0xFF666666;

            guiGraphics.drawString(this.font, text, panelX + 5, y, color, false);

            // –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–µ–ª–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
            guiGraphics.pose().pushPose();
            guiGraphics.pose().scale(0.7f, 0.7f, 1.0f);
            String desc = achievement.description;
            guiGraphics.drawString(this.font, desc,
                    (int)((panelX + 8) / 0.7f), (int)((y + 10) / 0.7f),
                    unlocked ? 0xFFAAAAAA : 0xFF444444, false);
            guiGraphics.pose().popPose();

            y += 22;
        }
    }

    private void renderFloatingNumbers(GuiGraphics guiGraphics) {
        for (FloatingNumber number : floatingNumbers) {
            number.render(guiGraphics, this.font);
        }
    }

    private void renderBottomPanel(GuiGraphics guiGraphics) {
        int panelY = this.height - 60;
        int panelHeight = 30;

        // –§–æ–Ω
        guiGraphics.fill(0, panelY, this.width, panelY + panelHeight, 0x88000000);

        // –ü–æ–¥—Å–∫–∞–∑–∫–∏
        String hint = "üí° –°–æ–≤–µ—Ç: –¢–∞–ø–∞–π—Ç–µ –±—ã—Å—Ç—Ä–µ–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤! –®–∞–Ω—Å –±–æ–Ω—É—Å–∞: 15%";
        int hintX = this.width / 2 - this.font.width(hint) / 2;

        // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏
        float alpha = Mth.sin(animationTick * 0.05f) * 0.3f + 0.7f;
        int color = (int)(255 * alpha) << 24 | 0xFFFFFF;

        guiGraphics.drawString(this.font, hint, hintX, panelY + 10, color, false);
    }

    @Override
    public boolean keyPressed(int keyCode, int scanCode, int modifiers) {
        // –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ç–∞–ø–∞—Ç—å –ø—Ä–æ–±–µ–ª–æ–º –∏–ª–∏ U (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –≤–∫–ª—é—á–µ–Ω–∞)
        if (Config.enableShaurma && (keyCode == GLFW.GLFW_KEY_SPACE || keyCode == GLFW.GLFW_KEY_U)) {
            ShaurmaSystem.onShaurmaTap();
            createFloatingNumber();
            playTapAnimation();
            return true;
        }

        if (keyCode == GLFW.GLFW_KEY_ESCAPE) {
            this.onClose();
            return true;
        }

        return super.keyPressed(keyCode, scanCode, modifiers);
    }

    // –ö–ª–∞—Å—Å –¥–ª—è –ª–µ—Ç–∞—é—â–∏—Ö —á–∏—Å–µ–ª
    private static class FloatingNumber {
        private final int startX, startY;
        private final String text;
        private int life = 60; // 3 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–∏ 20 FPS
        private final int maxLife = 60;

        public FloatingNumber(int x, int y, String text) {
            this.startX = x;
            this.startY = y;
            this.text = text;
        }

        public void tick() {
            life--;
        }

        public boolean isDead() {
            return life <= 0;
        }

        public void render(GuiGraphics guiGraphics, net.minecraft.client.gui.Font font) {
            if (isDead()) return;

            float progress = 1.0f - (float)life / maxLife;
            float alpha = life > 20 ? 1.0f : (float)life / 20f;

            int x = startX;
            int y = (int)(startY - progress * 30); // –ü–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –≤–≤–µ—Ä—Ö

            int color = (int)(255 * alpha) << 24 | 0x00FF00;

            guiGraphics.pose().pushPose();
            float scale = 1.0f + progress * 0.5f;
            guiGraphics.pose().scale(scale, scale, 1.0f);

            int scaledX = (int)(x / scale);
            int scaledY = (int)(y / scale);
            guiGraphics.drawString(font, text, scaledX, scaledY, color, true);

            guiGraphics.pose().popPose();
        }
    }

    // –ö–ª–∞—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    private static class Achievement {
        final String id;
        final String name;
        final String description;
        final String icon;
        final long requirement;

        Achievement(String id, String name, String description, String icon, long requirement) {
            this.id = id;
            this.name = name;
            this.description = description;
            this.icon = icon;
            this.requirement = requirement;
        }
    }
}