package com.scs.client;

import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.client.event.CustomizeGuiOverlayEvent;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiGraphics;
import net.minecraft.network.chat.Component;
import net.minecraft.util.Mth;
import com.scs.Config;
import com.scs.Scs;

import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.text.DecimalFormat;

public final class HudOverlay {

    private static boolean hudVisible = true;
    private static final DateTimeFormatter TIME_FORMATTER = DateTimeFormatter.ofPattern("HH:mm:ss");
    private static final DecimalFormat SHAURMA_FORMAT = new DecimalFormat("#,###");
    private static int animationTick = 0;

    public static void toggleHud() {
        hudVisible = !hudVisible;
        Minecraft.getInstance().gui.setOverlayMessage(
                Component.literal("ScS HUD: " + (hudVisible ? "–í–∫–ª—é—á–µ–Ω" : "–í—ã–∫–ª—é—á–µ–Ω")),
                false
        );
    }

    @SubscribeEvent
    public void onRenderHud(CustomizeGuiOverlayEvent event) {
        if (!Config.enableHud || !hudVisible) return;

        var mc = Minecraft.getInstance();
        if (mc.player == null || mc.level == null) return;

        animationTick++;
        GuiGraphics g = event.getGuiGraphics();
        int sw = mc.getWindow().getGuiScaledWidth();
        int sh = mc.getWindow().getGuiScaledHeight();

        // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        int x = Config.hudX < 0 ? sw + Config.hudX : Config.hudX;
        int y = Config.hudY;
        int w = 320;

        // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        List<ChatTap.Entry> entriesToShow = new ArrayList<>();
        int count = 0;
        for (ChatTap.Entry entry : ChatTap.ENTRIES) {
            if (count >= Config.showLast) break;
            entriesToShow.add(entry);
            count++;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è —à–∞—É—Ä–º–∞-–ø–∞–Ω–µ–ª–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –≤–∫–ª—é—á–µ–Ω–∞
        int shaurmaPanelHeight = (Config.enableShaurma && Config.shaurmaHud) ? 45 : 0;
        int mainPanelHeight = 16 + (entriesToShow.size() * 11) + 8;

        // –†–∏—Å—É–µ–º —à–∞—É—Ä–º–∞-–ø–∞–Ω–µ–ª—å —Å–≤–µ—Ä—Ö—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
        if (Config.enableShaurma && Config.shaurmaHud) {
            renderShaurmaPanel(g, x, y, w);
            y += shaurmaPanelHeight + 4;
        }

        // –†–∏—Å—É–µ–º –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏
        g.fill(x - 4, y - 2, x + w + 4, y + mainPanelHeight, 0x90000000);

        // –†–∏—Å—É–µ–º —Ä–∞–º–∫—É –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏
        g.fill(x - 5, y - 3, x + w + 5, y - 2, 0xFF444444); // –≤–µ—Ä—Ö
        g.fill(x - 5, y + mainPanelHeight, x + w + 5, y + mainPanelHeight + 1, 0xFF444444); // –Ω–∏–∑
        g.fill(x - 5, y - 3, x - 4, y + mainPanelHeight + 1, 0xFF444444); // –ª–µ–≤–æ
        g.fill(x + w + 4, y - 3, x + w + 5, y + mainPanelHeight + 1, 0xFF444444); // –ø—Ä–∞–≤–æ

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π
        g.fill(x - 4, y - 2, x + w + 4, y + 14, 0xAA222222);
        g.drawString(mc.font, "ScS ‚Ä¢ –ê–Ω—Ç–∏—á–∏—Ç –ú–æ–Ω–∏—Ç–æ—Ä", x, y, 0xFFFFFF, true);

        // –°—á–µ—Ç—á–∏–∫–∏
        int violationCount = ChatTap.VIOLATIONS.size();
        String stats = String.format("–ù–∞—Ä—É—à–µ–Ω–∏–π: %d | –í—Å–µ–≥–æ: %d", violationCount, ChatTap.ENTRIES.size());
        g.drawString(mc.font, stats, x + 200, y, 0xCCCCCC, false);

        y += 16;

        // –†–∏—Å—É–µ–º –∑–∞–ø–∏—Å–∏
        for (ChatTap.Entry entry : entriesToShow) {
            int color = getColorForEntry(entry);
            String timeStr = entry.timestamp.atZone(ZoneId.systemDefault()).format(TIME_FORMATTER);
            String displayText = String.format("[%s] %s", timeStr, entry.text);

            // –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            displayText = clipText(displayText, w - 8, mc.font);

            // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ñ–æ–Ω –¥–ª—è —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π
            boolean isSerious = false;
            for (ChatTap.ViolationEntry violation : ChatTap.VIOLATIONS) {
                if (violation.playerName != null && violation.playerName.equals(entry.playerName) && violation.isSerious) {
                    isSerious = true;
                    break;
                }
            }

            if (isSerious) {
                g.fill(x - 2, y - 1, x + w + 2, y + 9, 0x44FF0000);
            }

            g.drawString(mc.font, displayText, x, y, color, false);
            y += 11;
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–Ω–∏–∑—É
        if (!entriesToShow.isEmpty()) {
            y += 4;
            g.fill(x - 4, y - 2, x + w + 4, y + 12, 0xAA111111);

            String info = Config.enableShaurma ?
                    "F8 - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å HUD | F9 - –∏—Å—Ç–æ—Ä–∏—è | F10 - –æ—á–∏—Å—Ç–∏—Ç—å | U - —Ç–∞–ø | Y - –º–µ–Ω—é" :
                    "F8 - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å HUD | F9 - –∏—Å—Ç–æ—Ä–∏—è | F10 - –æ—á–∏—Å—Ç–∏—Ç—å";
            g.drawString(mc.font, info, x, y, 0x888888, false);
        }
    }

    private void renderShaurmaPanel(GuiGraphics g, int x, int y, int w) {
        // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–Ω –ø–∞–Ω–µ–ª–∏ —à–∞—É—Ä–º—ã
        float wave = Mth.sin(animationTick * 0.1f) * 0.2f + 0.8f;
        int bgAlpha = (int)(255 * wave * 0.7f);
        int bgColor = (bgAlpha << 24) | 0x4A4A00; // –ñ–µ–ª—Ç–æ–≤–∞—Ç—ã–π —Ñ–æ–Ω

        g.fill(x - 4, y - 2, x + w + 4, y + 43, bgColor);

        // –ó–æ–ª–æ—Ç–∞—è —Ä–∞–º–∫–∞
        int borderColor = 0xFFFFD700;
        g.fill(x - 5, y - 3, x + w + 5, y - 2, borderColor); // –≤–µ—Ä—Ö
        g.fill(x - 5, y + 43, x + w + 5, y + 44, borderColor); // –Ω–∏–∑
        g.fill(x - 5, y - 3, x - 4, y + 44, borderColor); // –ª–µ–≤–æ
        g.fill(x + w + 4, y - 3, x + w + 5, y + 44, borderColor); // –ø—Ä–∞–≤–æ

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —à–∞—É—Ä–º–∞-–ø–∞–Ω–µ–ª–∏
        String title = "üåØ –®–ê–£–†–ú–ê –ò–ú–ü–ï–†–ò–Ø üåØ";
        g.drawString(Minecraft.getInstance().font, title, x, y, 0xFFFFD700, true);

        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞—É—Ä–º—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        long shaurmaCount = ShaurmaSystem.getShaurmaCount();
        String shaurmaText = SHAURMA_FORMAT.format(shaurmaCount) + " üåØ";

        // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —à–∞—É—Ä–º—ã
        g.pose().pushPose();
        float scale = 1.3f + Mth.sin(animationTick * 0.08f) * 0.1f;
        g.pose().scale(scale, scale, 1.0f);

        int scaledX = (int)((x + 5) / scale);
        int scaledY = (int)((y + 15) / scale);
        g.drawString(Minecraft.getInstance().font, shaurmaText, scaledX, scaledY, 0xFF00FF00, true);
        g.pose().popPose();

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–ø–æ–≤
        long totalTaps = ShaurmaSystem.getTotalTaps();
        String tapsText = "–¢–∞–ø–æ–≤: " + SHAURMA_FORMAT.format(totalTaps);
        g.drawString(Minecraft.getInstance().font, tapsText, x + 200, y + 15, 0xFFCCCCCC, false);

        // –°—Ä–µ–¥–Ω–µ–µ –∑–∞ —Ç–∞–ø
        double avgPerTap = ShaurmaSystem.getAveragePerTap();
        String avgText = String.format("–°—Ä–µ–¥–Ω–µ–µ: %.2f", avgPerTap);
        g.drawString(Minecraft.getInstance().font, avgText, x + 200, y + 27, 0xFFCCCCCC, false);

        // –ü–æ–¥—Å–∫–∞–∑–∫–∞
        String hintText = "–ù–∞–∂–º–∏ U –¥–ª—è —Ç–∞–ø–∞ –∏–ª–∏ Y –¥–ª—è –º–µ–Ω—é";
        float hintAlpha = Mth.sin(animationTick * 0.05f) * 0.3f + 0.7f;
        int hintColor = (int)(255 * hintAlpha) << 24 | 0xFFFF88;
        g.drawString(Minecraft.getInstance().font, hintText, x + 5, y + 30, hintColor, false);

        // –ú–∏–≥–∞—é—â–∏–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
        if (animationTick % 40 < 20) {
            g.drawString(Minecraft.getInstance().font, "‚ú®", x + w - 20, y + 5, 0xFFFFFF00, false);
        }
        if ((animationTick + 20) % 40 < 20) {
            g.drawString(Minecraft.getInstance().font, "‚ú®", x + w - 40, y + 25, 0xFFFFFF00, false);
        }
    }

    private int getColorForEntry(ChatTap.Entry entry) {
        switch (entry.kind) {
            case "CHECK":
                return Config.parseColor(Config.checkColor, 0x00FF7F);
            case "AC":
            case "VIOLATION":
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–µ—Ä—å–µ–∑–Ω—ã–º –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º
                for (ChatTap.ViolationEntry violation : ChatTap.VIOLATIONS) {
                    if (violation.playerName != null && violation.playerName.equals(entry.playerName)) {
                        return violation.isSerious ? 0xFF4444 : Config.parseColor(Config.violationColor, 0xFFA500);
                    }
                }
                return Config.parseColor(Config.violationColor, 0xFFA500);
            default:
                return 0xCCCCCC;
        }
    }

    private String clipText(String text, int maxWidth, net.minecraft.client.gui.Font font) {
        if (font.width(text) <= maxWidth) {
            return text;
        }

        String ellipsis = "...";

        int lo = 0, hi = text.length();
        while (lo < hi) {
            int mid = (lo + hi + 1) >>> 1;
            String substring = text.substring(0, mid) + ellipsis;
            if (font.width(substring) <= maxWidth) {
                lo = mid;
            } else {
                hi = mid - 1;
            }
        }

        return text.substring(0, Math.max(0, lo)) + ellipsis;
    }

    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    public static boolean isHudVisible() {
        return hudVisible;
    }

    public static void setHudVisible(boolean visible) {
        hudVisible = visible;
    }
}